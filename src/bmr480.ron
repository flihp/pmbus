([
    (0xc4, "MFR_VIN_OV_WARN_RESPONSE", WriteByte, ReadByte),
    (0xc5, "MFR_CONFIG_UNUSED_PINS", WriteWord, ReadWord),
    (0xc6, "MFR_RC_LEVEL", WriteByte, ReadByte),
    (0xc7, "MFR_KS_PRETRIG", WriteByte, ReadByte),
    (0xc8, "MFR_FAST_VIN_OFF_OFFSET", WriteByte, ReadByte),
    (0xd0, "MFR_PGOOD_POLARITY", WriteByte, ReadByte),
    (0xd1, "MFR_FAST_OCP_CFG", WriteWord, ReadWord),
    (0xd2, "MFR_RESPONSE_UNIT_CFG", WriteByte, ReadByte),
    (0xd3, "MFR_VIN_SCALE_MONITOR", Illegal, ReadBlock),
    (0xd4, "MFR_PREBIAS_DVDT_CFG", WriteBlock, ReadBlock),
    (0xd5, "MFR_FILTER_SELECT", WriteByte, ReadByte),
    (0xd7, "MFR_GET_SNAPSHOT", Illegal, ReadBlock),
    (0xd8, "MFR_TEMP_COMPENSATION", Illegal, ReadBlock),
    (0xd9, "MFR_SET_ROM_MODE", WriteBlock, Illegal),
    (0xda, "MFR_ISHARE_THRESHOLD", WriteBlock, ReadBlock),
    (0xdb, "MFR_GET_RAMP_DATA", Illegal, ReadBlock),
    (0xdc, "MFR_SELECT_TEMPERATURE_SENSOR", WriteByte, ReadByte),
    (0xdd, "MFR_VIN_OFFSET", Illegal, ReadBlock),
    (0xde, "MFR_VOUT_OFFSET_MONITOR", Illegal, ReadWord),
    (0xdf, "MFR_GET_STATUS_DATA", Illegal, ReadBlock),
    (0xe0, "MFR_SPECIAL_OPTIONS", WriteByte, ReadByte),
    (0xe1, "MFR_TEMP_OFFSET_INT", Illegal, ReadWord),
    (0xe2, "MFR_REMOTE_TEMP_CAL", Illegal, ReadBlock),
    (0xe3, "MFR_REMOTE_CTRL", WriteByte, ReadByte),
    (0xe6, "MFR_VFF_PARAMS", WriteBlock, ReadBlock),
    (0xe7, "MFR_TEMP_COEFF", Illegal, ReadBlock),
    (0xe8, "MFR_FILTER_COEFF", WriteBlock, ReadBlock),
    (0xe9, "MFR_FILTER_NLR_GAIN", WriteBlock, ReadBlock),
    (0xeb, "MFR_MIN_DUTY", WriteWord, ReadWord),
    (0xec, "MFR_ACTIVE_CLAMP", Illegal, ReadWord),
    (0xee, "MFR_OFFSET_ADDRESS", WriteByte, ReadByte),
    (0xef, "MFR_DBV_CONFIG", WriteBlock, ReadBlock),
    (0xf0, "MFR_DEBUG_BUFF", WriteBlock, ReadBlock),
    (0xf1, "MFR_SETUP_PASSWORD", WriteBlock, ReadBlock),
    (0xf2, "MFR_DISABLE_SECURITY_ONCE", WriteBlock, ReadBlock),
    (0xf4, "MFR_SECURITY_BIT_MASK", Illegal, ReadBlock),
    (0xf5, "MFR_TRANSFORMER_TURN", Illegal, ReadByte),
    (0xf6, "MFR_OSC_TRIM", Illegal, ReadByte),
    (0xf7, "MFR_DLC_CONFIG", WriteBlock, ReadBlock),
    (0xf8, "MFR_ILIM_SOFTSTART", WriteByte, ReadByte),
    (0xf9, "MFR_MULTI_PIN_CONFIG", WriteByte, ReadByte),
    (0xfc, "MFR_ADDED_DROOP_DURING_RAMP", WriteWord, ReadWord),
    (0xfd, "MFR_FIRMWARE_DATA", Illegal, ReadBlock),
    (0xfe, "MFR_RESTART", WriteBlock, Illegal),
], [
//    ("READ_VOUT", VOutMode(UnsignedLinear), Volts),
    ("READ_IOUT", Linear11, Amperes),
], {
    "MFR_VIN_OV_WARN_RESPONSE": {
        "Response": (
            name: "Vin overvoltage response",
            bits: Bitrange(High(7), Low(6)),
            values: Sentinels({
                "Ignore": (0b00, "ignore fault"),
                "OperateAndRetry": (0b01, "operate and retry"),
                "DisableAndRetry": (0b10, "disable and retry"),
                "DisableUntilClear": (0b11, "disable until cleared"),
            }),
        ),
        "Retries": (
            name: "Retry disposition",
            bits: Bitrange(High(5), Low(3)),
            values: Sentinels({
                "DoNotRetry": (0b000, "do not retry"),
                "RetryOnce": (0b001, "retry once"),
                "RetryTwice": (0b010, "retry twice"),
                "Retry3Times": (0b011, "retry 3 times"),
                "Retry4Times": (0b100, "retry 4 times"),
                "Retry5Times": (0b101, "retry 5 times"),
                "Retry6Times": (0b110, "retry 6 times"),
                "RetryContinuously": (0b111, "retry continuously"),
            }),
        ),
        "RetryTime": (
            name: "Retry/delay time (log)",
            bits: Bitrange(High(2), Low(0)),
            values: Scalar,
        ),
    },

    "MFR_PGOOD_POLARITY": {
        "Polarity": (
            name: "Power good polarity",
            bits: Bitrange(High(7), Low(0)),
            values: Sentinels({
                "ActiveLow": (0x00, "Active low"),
                "ActiveHigh": (0x01, "Active high"),
            })
        )
    },

    "MFR_FAST_OCP_CFG": {
        "Samples": (
            name: "Samples to trigger OCP",
            bits: Bitrange(High(12), Low(8)),
            values: Scalar,
        ),
        "Enable": (
            name: "Overcurrent protection enable",
            bits: Bit(7),
            values: Sentinels({
                "Disabled": (0b0, "disabled"),
                "Enabled": (0b1, "enabled"),
            }),
        ),
        "Level": (
            name: "Level to trigger OCP",
            bits: Bitrange(High(6), Low(0)),
            values: Scalar,
        )
    },

    "MFR_RESPONSE_UNIT_CFG": {
        "VOutUnit": (
            name: "Vout fault delay units",
            bits: Bitrange(High(7), Low(6)),
            values: Sentinels({
                "Unit1ms": (0b00, "1 millisecond/unit"),
                "Unit10ms": (0b01, "10 milliseconds/unit"),
                "Unit100ms": (0b10, "100 milliseconds/unit"),
                "Unit1s": (0b11, "1 second/unit"),
            })
        ),
        "VInUnit": (
            name: "Vin fault delay units",
            bits: Bitrange(High(5), Low(4)),
            values: Sentinels({
                "Unit1ms": (0b00, "1 millisecond/unit"),
                "Unit10ms": (0b01, "10 milliseconds/unit"),
                "Unit100ms": (0b10, "100 milliseconds/unit"),
                "Unit1s": (0b11, "1 second/unit"),
            })
        ),
        "IOutUnit": (
            name: "Iout fault delay units",
            bits: Bitrange(High(3), Low(2)),
            values: Sentinels({
                "Unit1ms": (0b00, "1 millisecond/unit"),
                "Unit10ms": (0b01, "10 milliseconds/unit"),
                "Unit100ms": (0b10, "100 milliseconds/unit"),
                "Unit1s": (0b11, "1 second/unit"),
            })
        ),
        "TempUnit": (
            name: "Temp response delay units",
            bits: Bitrange(High(1), Low(0)),
            values: Sentinels({
                "Unit1ms": (0b00, "1 millisecond/unit"),
                "Unit10ms": (0b01, "10 milliseconds/unit"),
                "Unit100ms": (0b10, "100 milliseconds/unit"),
                "Unit1s": (0b11, "1 second/unit"),
            })
        ),
    },

    "MFR_ISHARE_THRESHOLD": {
        "TrimLimit": (
            name: "Output voltage trim limit",
            bits: Bitrange(High(31), Low(24)),
            values: ScaledUnits(Millivolts, Factor(1.7)),
        )
    },

/*
    "MFR_TEMP_COMPENSATION": {
        "TempThreshold2Deadtime": (
            name: "Temp threshold 2 dead time (ns)",
            bits: Bitrange(High(63), Low(56)),
            values: Units(Nanoseconds)
            Scaled(Nanoseconds, 0.10),
            ScaledOffset(
            Scaled(Amperes, 0.050)




            Celsius(0.25)
            Volts(0.0001)
            Millivolts(
            Amps(
            Milliamps(
*/

})
